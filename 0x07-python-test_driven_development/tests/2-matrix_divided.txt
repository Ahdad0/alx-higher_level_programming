===========================
How to use 2-matrix_divided
===========================

This module define an matrix and an integer ``def matrix_divided(matrix, div)``

Number
======

``def matrix_divided(matrix, div)`` return a new matrix divided by div.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

::

	>>> matrix_divided([[1, 2, -3], [4, 5, 6]], 3)
        [[0.33, 0.67, -1.0], [1.33, 1.67, 2.0]]

::

	>>> matrix_divided([[1, 2, 3], [4.3, 5, 6]], 3)
        [[0.33, 0.67, 1.0], [1.43, 1.67, 2.0]]

::

	>>> matrix_divided([[1, 2, 3], [4.3, 5, 6]], -3)
        [[-0.33, -0.67, -1.0], [-1.43, -1.67, -2.0]]

Non-number
==========

``def matrix_divided(matrix, div)`` raise exceptions in case
that matrix has not an int or float

::

	>>> matrix_divided([[1, 'd', 3],[4, 5, 6]], 3)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

::

        >>> matrix_divided([[1, 2, 3],[4, 's', 6]], 3)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix_divided([[1, 2, 3],[4, False, 6]], 3)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

::

        >>> matrix_divided([[None, 2, 3],[4, 3, 6]], 3)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

``def matrix_divided(matrix, div)`` raise exceptions in case
that div is 0 or if it is not equal to int or float

::

	>>> matrix_divided([[1, 2, 3],[4, 5, 6]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

::

	>>> matrix_divided([[1, 2, 3],[4, 5, 6]], 'a')
	Traceback (most recent call last):
	TypeError: div must be a number

::

	>>> matrix_divided([[1, 2, 3],[4, 5, 6]], '9f')
        Traceback (most recent call last):
        TypeError: div must be a number

``def matrix_divided(matrix, div)`` raise exceptions in case
that matrix has not the same size

::

	>>> matrix_divided([[1, 2, 3],[4, 5, 2],[1]], 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

::

	>>> matrix_divided([[1, 2, 3], [2, 3]], 7)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size
